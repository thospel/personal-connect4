#!/usr/bin/perl -w
use strict;
use warnings;

use POSIX qw(SIGALRM);
use IPC::Open2;
use File::Copy qw(copy);
use Sys::Hostname;

my $VERSION = "1.004";

my $PROGRAM = "connect4";
my $TIMEOUT = 60;

use Getopt::Long 2.24 qw(:config bundling require_order);

die "Could not parse your command line. Try $0 -h\n" unless
    GetOptions("timeout|t=o"	=> \$TIMEOUT,
               "p|program=s"	=> \$PROGRAM,
               "P|private!"	=> \my $private,
               "B|preload!"	=> \my $preload,
               "T|bits=o"	=> \my $transposition_bits,
               "k|keep!"	=> \my $keep,
               "version!"	=> \my $version,
               "U|unsafe!"	=> \my $unsafe,
               "h|help!"	=> \my $help);

if ($version) {
    print<<"EOF";
tester (personal-connect4) $VERSION
EOF
    exit 0;
}
if ($help) {
    require Config;
    $ENV{PATH} .= ":" unless $ENV{PATH} eq "";
    $ENV{PATH} = "$ENV{PATH}$Config::Config{'installscript'}";
    exec("perldoc", "-F", $unsafe ? "-U" : (), $0) || exit 1;
    # make parser happy
    %Config::Config = ();
}

my $host = hostname();
$host =~ s/\..*//;

my $unlink;
if ($private) {
    my $new_program = "$PROGRAM-$host.$$";
    copy($PROGRAM, $new_program) ||
        die "Could not copy '$PROGRAM' to '$new_program': $!";
    $PROGRAM = $new_program;
    $unlink = 1;
    chmod(0700, $new_program) || die "Could not chmod '$new_program': $!";
}

END {
    unlink($PROGRAM) if $unlink;
}

$| = 1;
sub test_file {
    my ($file, $weak) = @_;

    my $total_visits   = 0;
    my $total_duration = 0;
    my $nr_pos         = 0;
    open (my $fh, "<", $file) || die "Could not open '$file': $!\n";
    my $pid = open2(my $out, my $in,
                    "./$PROGRAM",
                    -t => $TIMEOUT,
                    $weak ? "-w" : (),
                    $keep ? "-k" : (),
                    $preload ? ("-b" => $file) : (),
                    $transposition_bits ? ("-T" => $transposition_bits) : (),
                ) || die "Could not fork/exec: $!\n";
    # open2 already makes sure $in is flushing

    my $name = sprintf("%s %s", $file, $weak ? "weak  " : "strong");
    eval {
        my $line;
        local $_;
        while (<$fh>) {
            print($in $_) || die "Write error to $PROGRAM: $!";
            while ($line = <$out>) {
                last if $line =~/^\d/;
            }
            defined($line) || die "Unexpected EOF from $PROGRAM";
            my ($pos, $score, $duration, $visists) = $line =~ /^(\d+)\s+([+-]?\d+)\s+(\d+)\s+(\d+)\s*$/ or
                die "Could not parse $PROGRAM output: $line";
            $score += 0;
            chomp;
            s/^\Q$pos\E\s+// || die "Wrong position";
            if ($weak) {
                if ($_ > 0) {
                    $score > 0 && $score <= $_ ||
                        die "Wrong answer: $pos $_ but $PROGRAM says $score";
                } elsif ($_ < 0) {
                    $score < 0 && $score >= $_ ||
                        die "Wrong answer: $pos $_ but $PROGRAM says $score";
                } else {
                    $score == 0 ||
                        die "Wrong answer: $pos $_ but $PROGRAM says $score";
                }
            } else {
                $score == $_ || die "Wrong answer: $pos $_ but $PROGRAM says $score";
            }
            #print "($pos, $score, $duration, $visists)\n";
            $total_duration += $duration;
            $total_visits   += $visists;
            ++$nr_pos;
        }
        close($in);
        while ($line = <$out>) {
            last if $line =~/^\d/;
        }
        die "Spurious output from $PROGRAM: $line" if defined $line;
    };
    my $err = $@;
    kill TERM => $pid if $err;
    waitpid( $pid, 0 );
    if ($? == SIGALRM) {
        printf("Test %s: Timed out\n", $name);
    } else {
        die "Test $name: $err" if $err;
        die "Unexped exit code $? from $PROGRAM" if $? ;
        printf("Test %s: avg time: %.3f, avg visits: %.1f, speed: %.0f Kpos/s\n", $name, $total_duration/$nr_pos, $total_visits / $nr_pos, $total_visits * 1000 / $total_duration);
    }
}

# system("make $PROGRAM") && die "make filed\n";
test_file($_) for @ARGV;	# Strong
test_file($_, 1) for @ARGV;	# Weak
__END__

=head1 NAME

tester - Run a connect4 benchmark

=head1 SYNOPSIS

 tester [-w] [--timeout|-t <timeout>] [--program|-p <program] [-P|--private] {files}
 tester [--version] [--unsafe] [-U] [-h] [--help]

=head1 OPTIONS

=over 4

=item X<weak>-w

Don't compute exact scores, only win/draw/loss

=item X<timeout>-t, --timeout <timeout>

Sets a timeout. Defaults to C<60>.

=item X<program>-p, --program <program>

Which program to benchmark. Defaults to C<connect4>.

=item X<private>-P, --private

Make a temporary private copy of F<program> before running tests. This makes sure you can still do new compiles while the tests are running without the later tests picking up the new version of the program. The copy is deleted at the end of the tests.

=item X<help>-h, --help

Show this help.

=item X<unsafe>-U, --unsafe

Allow even root to run the perldoc.
Remember, the reason this is off by default is because it B<IS> unsafe.

=item X<version>--version

Print version info.

=back

=head1 EXAMPLE

A typical use would be:

  tester Test_L*

=head1 BUGS

None known

=head1 SEE ALSO

L<connect4(1)>,

=head1 AUTHOR

Ton Hospel, E<lt>git@ton.iguana.beE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2018 by Ton Hospel

This library is free software; you can redistribute it and/or modify
it under the terms of version 3 of the GNU General Public License
(see F<LICENSE>)

=cut
